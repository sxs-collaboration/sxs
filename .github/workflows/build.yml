name: tests

on: [push]

jobs:

  build:
    name: ${{ matrix.os }} python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    if: >-
        !contains(github.event.head_commit.message, '[skip ci]')
        && !contains(github.event.head_commit.message, '[skip tests]')

    strategy:
      # fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8] #, 3.9] #, pypy3]
        # exclude:
        #   - os: windows-latest
        #     python-version: pypy3

    steps:
      - name: Skip replicates on main branch
        env:
          skip_replicates: ${{ github.ref == 'refs/heads/main' && (matrix.os != 'ubuntu-latest' || matrix.python-version != '3.8') }}
        run: |
          # echo "skipping_build_and_test_replicate=${skip_replicates}" >> $GITHUB_ENV
          echo "skipping_build_and_test_replicate='false'" >> $GITHUB_ENV

      - name: Check out code
        if: ${{ env.skipping_build_and_test_replicate != 'true' }}
        uses: actions/checkout@v2

      - name: Set up python ${{ matrix.python-version }}
        if: ${{ env.skipping_build_and_test_replicate != 'true' }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install poetry
        if: ${{ env.skipping_build_and_test_replicate != 'true' }}
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry  # Only install poetry like this in containers

      - name: Build and install with poetry
        if: ${{ env.skipping_build_and_test_replicate != 'true' }}
        run: |
          rm poetry.lock
          python -m poetry build
          python -m poetry install

      - name: Run tests
        if: ${{ env.skipping_build_and_test_replicate != 'true' }}
        run: |
          python -m poetry run pytest -s --cov=sxs --cov-branch --cov-report=xml --durations=0

      - name: Upload coverage
        if: "matrix.python-version == 3.8 && matrix.os == 'ubuntu-latest'"
        shell: bash
        run: |
          bash <(curl -s https://codecov.io/bash)


  release:
    name: Create release and send to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: >-
        github.ref == 'refs/heads/main'
        && !contains(github.event.head_commit.message, '[no release]')
        && (success() || contains(github.event.head_commit.message, '[skip tests]'))

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install poetry and this package
        run: |
          python -m pip install --upgrade pip
          python -m pip install toml
          python -m pip install poetry  # Only install poetry like this in containers
          python -m poetry update
          python -m poetry build
          python -m poetry install --no-dev

      - name: Bump version
        shell: bash
        env:
          github_event_head_commit_message: ${{ github.event.head_commit.message }}
        run: |
          export version_bump_rule=$(python .github/scripts/parse_bump_rule.py)
          echo "version_bump_rule: '${version_bump_rule}'"
          python -m poetry version "${version_bump_rule}"
          export new_version=$(python .github/scripts/parse_version.py pyproject.toml)
          echo "new_version: '${new_version}'"
          echo "new_version=${new_version}" >> $GITHUB_ENV  # Save env variable for later steps

      - name: Tag and push new version
        shell: bash
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add pyproject.toml
          git commit -m "Bump version to v${new_version}"
          git tag -a "v${new_version}" -m "Version ${new_version}"
          git status
          git push --follow-tags  # Will not trigger new workflow because it uses GITHUB_TOKEN

      - name: Create release
        if: "!contains(github.event.head_commit.message, '[no release]')"
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.new_version }}
          release_name: Release v${{ env.new_version }}
          draft: false
          prerelease: false

      - name: Publish to PyPI
        if: "!contains(github.event.head_commit.message, '[no pypi]')"
        env:
          # 1) Get key from https://pypi.org/manage/account/token/
          # 2) Copy it to Github > repo > Settings > Secrets
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m poetry build
          python -m poetry install --no-dev
          python -m poetry publish


  binder:
    name: Trigger a binder rebuild
    needs: release
    runs-on: ubuntu-latest
    if: >-
        github.ref == 'refs/heads/main'
        && !contains(github.event.head_commit.message, '[no release]')
        && (success() || contains(github.event.head_commit.message, '[skip tests]'))

    steps:
      - name: Trigger other repository
        # I created a new personal access token via github profile > settings > developer settings >
        # personal access tokens.  I clicked the "repo" checkbox, created the token, and copied it.
        # Then, I went to this repo's settings > secrets, and created a new secret named
        # "MOBLE_TOKEN" with a value of "moble:<token>", where <token> is the copied token.  This
        # command sends a POST to the other repo, which is set up to build on `workflow_dispatch`.
        run: |
          curl \
          -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -u ${{ secrets.MOBLE_TOKEN }} \
          https://api.github.com/repos/moble/sxs_notebooks/actions/workflows/binder.yml/dispatches \
          -d '{"ref":"refs/heads/master"}'
